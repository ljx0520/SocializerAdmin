# This is an auto-generated Django model module.
# You'll have to do the following manually to clean this up:
#   * Rearrange models' order
#   * Make sure each model has one field with primary_key=True
#   * Make sure each ForeignKey and OneToOneField has `on_delete` set to the desired behavior
#   * Remove `managed = False` lines if you wish to allow Django to create, modify, and delete the table
# Feel free to rename the models, but don't rename db_table values or field names.
from django.db import models


class Offers(models.Model):
    id = models.UUIDField(primary_key=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    deleted_at = models.BigIntegerField(blank=True, null=True)
    link_offer_id = models.TextField(blank=True, null=True)
    creator_id = models.TextField()
    payer_id = models.TextField()
    payee_id = models.TextField()
    activity_category = models.TextField()
    title = models.TextField()
    description = models.TextField(blank=True, null=True)
    notes_payee = models.TextField(blank=True, null=True)
    notes_payer = models.TextField(blank=True, null=True)
    from_datetime = models.DateTimeField()
    to_datetime = models.DateTimeField()
    total_duration_hour = models.DecimalField(max_digits=10, decimal_places=6, blank=True, null=True)
    price_per_hour = models.DecimalField(max_digits=20, decimal_places=8, blank=True, null=True)
    price_currency = models.TextField()
    total_price = models.DecimalField(max_digits=20, decimal_places=8, blank=True, null=True)
    meeting_postal_code = models.TextField()
    meeting_address = models.TextField()
    meeting_suburb = models.TextField()
    meeting_state = models.TextField()
    meeting_country = models.TextField()
    meeting_lat = models.DecimalField(max_digits=20, decimal_places=8, blank=True, null=True)
    meeting_long = models.DecimalField(max_digits=20, decimal_places=8, blank=True, null=True)
    offer_status = models.TextField()
    offer_sn = models.BinaryField(unique=True)
    activity_sub_category = models.TextField(blank=True, null=True)  # This field type is a guess.
    image_url = models.JSONField(blank=True, null=True)
    notes = models.JSONField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'offers'


class OrderExclusions(models.Model):
    id = models.UUIDField(primary_key=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    deleted_at = models.BigIntegerField(blank=True, null=True)
    excluded_user_id = models.TextField()
    user_id = models.TextField()

    class Meta:
        managed = False
        db_table = 'order_exclusions'
        unique_together = (('excluded_user_id', 'user_id'),)


class OrderStatusDetails(models.Model):
    id = models.UUIDField(primary_key=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    deleted_at = models.BigIntegerField(blank=True, null=True)
    order = models.ForeignKey('Orders', models.DO_NOTHING)
    order_status = models.TextField()

    class Meta:
        managed = False
        db_table = 'order_status_details'


class Orders(models.Model):
    id = models.UUIDField(primary_key=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    deleted_at = models.BigIntegerField(blank=True, null=True)
    payer_id = models.TextField()
    payee_id = models.TextField()
    offer_id = models.TextField()
    activity_category = models.TextField()
    title = models.TextField()
    description = models.TextField(blank=True, null=True)
    notes_payee = models.TextField(blank=True, null=True)
    notes_payer = models.TextField(blank=True, null=True)
    from_datetime = models.DateTimeField()
    to_datetime = models.DateTimeField()
    total_duration_hour = models.DecimalField(max_digits=10, decimal_places=6, blank=True, null=True)
    price_per_hour = models.DecimalField(max_digits=20, decimal_places=8, blank=True, null=True)
    price_currency = models.TextField()
    total_price = models.DecimalField(max_digits=20, decimal_places=8, blank=True, null=True)
    meeting_postal_code = models.TextField()
    meeting_address = models.TextField()
    meeting_suburb = models.TextField()
    meeting_state = models.TextField()
    meeting_country = models.TextField()
    meeting_lat = models.DecimalField(max_digits=20, decimal_places=8, blank=True, null=True)
    meeting_long = models.DecimalField(max_digits=20, decimal_places=8, blank=True, null=True)
    order_status = models.TextField()
    order_sn = models.BinaryField(unique=True)
    payment_type = models.TextField()
    payment_id = models.TextField(blank=True, null=True)
    paid_at = models.DateTimeField(blank=True, null=True)
    paid_amount = models.DecimalField(max_digits=20, decimal_places=8, blank=True, null=True)
    is_refunded = models.BooleanField(blank=True, null=True)
    refund_amount = models.DecimalField(max_digits=20, decimal_places=8, blank=True, null=True)
    refund_at = models.DateTimeField(blank=True, null=True)
    is_paid_out = models.BooleanField(blank=True, null=True)
    payout_amount = models.DecimalField(max_digits=20, decimal_places=8, blank=True, null=True)
    payout_at = models.DateTimeField(blank=True, null=True)
    fee_amount = models.DecimalField(max_digits=20, decimal_places=8, blank=True, null=True)
    cancellation_requested_at = models.DateTimeField(blank=True, null=True)
    paid_credit_amount = models.DecimalField(max_digits=20, decimal_places=8, blank=True, null=True)
    paid_credit_at = models.DateTimeField(blank=True, null=True)
    finalized_at = models.DateTimeField(blank=True, null=True)
    credit_payment_id = models.TextField(blank=True, null=True)
    extended_paid_at = models.DateTimeField(blank=True, null=True)
    extended_price_per_hour = models.DecimalField(max_digits=20, decimal_places=8, blank=True, null=True)
    extended_datetime = models.DateTimeField(blank=True, null=True)
    is_extended = models.BooleanField(blank=True, null=True)
    extended_duration_hour = models.DecimalField(max_digits=10, decimal_places=6, blank=True, null=True)
    extended_total_price = models.DecimalField(max_digits=20, decimal_places=8, blank=True, null=True)
    extended_paid_amount = models.DecimalField(max_digits=20, decimal_places=8, blank=True, null=True)
    extended_payment_id = models.TextField(blank=True, null=True)
    extended_price_currency = models.TextField()
    extended_paid_credit_amount = models.DecimalField(max_digits=20, decimal_places=8, blank=True, null=True)
    extended_credit_payment_id = models.TextField(blank=True, null=True)
    extended_payment_type = models.TextField()
    extended_paid_credit_at = models.DateTimeField(blank=True, null=True)
    extend_finalized_at = models.DateTimeField(blank=True, null=True)
    extend_status = models.TextField()
    extend_id = models.TextField(blank=True, null=True)
    extend_sn = models.BinaryField(blank=True, null=True)
    activity_sub_category = models.TextField(blank=True, null=True)  # This field type is a guess.
    meeting_code = models.TextField(blank=True, null=True)
    image_url = models.JSONField(blank=True, null=True)
    notes = models.JSONField(blank=True, null=True)
    extended_paid_processing_fee = models.DecimalField(max_digits=20, decimal_places=8, blank=True, null=True)
    paid_processing_fee = models.DecimalField(max_digits=20, decimal_places=8, blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'orders'


class Ratings(models.Model):
    id = models.UUIDField(primary_key=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    deleted_at = models.BigIntegerField(blank=True, null=True)
    user_id = models.TextField()
    payer_id = models.TextField()
    payee_id = models.TextField()
    order_id = models.TextField()
    activity_category = models.TextField()
    comment = models.TextField(blank=True, null=True)
    rating = models.SmallIntegerField(blank=True, null=True)
    is_rated = models.BooleanField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'ratings'
        unique_together = (('deleted_at', 'user_id', 'order_id'),)


class StripeConnectedAccounts(models.Model):
    id = models.UUIDField(primary_key=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    deleted_at = models.BigIntegerField(blank=True, null=True)
    user_id = models.TextField()
    country_code = models.TextField()
    connected_account_id = models.TextField()

    class Meta:
        managed = False
        db_table = 'stripe_connected_accounts'
        unique_together = (('deleted_at', 'user_id', 'country_code'),)


class StripeConnects(models.Model):
    id = models.UUIDField(primary_key=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    deleted_at = models.BigIntegerField(blank=True, null=True)
    user_id = models.TextField()
    stripe_connect_id = models.TextField()
    country_code = models.TextField()
    stripe_connect_type = models.TextField()
    stripe_connect_charges_enabled = models.BooleanField(blank=True, null=True)
    stripe_connect_email = models.TextField(blank=True, null=True)
    stripe_connect_bank_routing_number = models.TextField(blank=True, null=True)
    stripe_connect_bank_last4_digits = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'stripe_connects'


class Transactions(models.Model):
    id = models.UUIDField(primary_key=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    deleted_at = models.BigIntegerField(blank=True, null=True)
    order_id = models.TextField(blank=True, null=True)
    transaction_type = models.TextField()
    transaction_amount = models.DecimalField(max_digits=20, decimal_places=8, blank=True, null=True)
    transaction_channel = models.TextField()
    reference_id = models.TextField(blank=True, null=True)
    transaction_currency = models.TextField()
    user_id = models.TextField()

    class Meta:
        managed = False
        db_table = 'transactions'


class UserUnavailabilities(models.Model):
    id = models.UUIDField(primary_key=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    deleted_at = models.BigIntegerField(blank=True, null=True)
    user_id = models.TextField()
    from_datetime = models.DateTimeField()
    to_datetime = models.DateTimeField()
    unavailable_reason = models.TextField()
    reference_id = models.TextField()
    reference_from_datetime = models.DateTimeField()
    reference_to_datetime = models.DateTimeField()
    description = models.TextField(blank=True, null=True)
    order_id = models.TextField(blank=True, null=True)

    class Meta:
        managed = False
        db_table = 'user_unavailabilities'
        unique_together = (('deleted_at', 'user_id', 'from_datetime'),)


class Wallets(models.Model):
    id = models.UUIDField(primary_key=True)
    created_at = models.DateTimeField(blank=True, null=True)
    updated_at = models.DateTimeField(blank=True, null=True)
    deleted_at = models.BigIntegerField(blank=True, null=True)
    currency = models.TextField()
    amount = models.DecimalField(max_digits=20, decimal_places=8, blank=True, null=True)
    credit_currency = models.TextField()
    credit_amount = models.DecimalField(max_digits=20, decimal_places=8, blank=True, null=True)
    wallet_sn = models.BinaryField()
    order_id = models.TextField()
    transaction_id = models.TextField()
    user_id = models.TextField()
    wallet_type = models.TextField()

    class Meta:
        managed = False
        db_table = 'wallets'
